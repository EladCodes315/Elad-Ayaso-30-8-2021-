{"version":3,"sources":["redux/slices/themeSlice.js","components/NavBarComp.js","redux/slices/locationAutocompleteSlice.js","redux/slices/currentConditionSlice.js","redux/slices/forecastSlice.js","redux/slices/geolocationSlice.js","components/ForecastDay.js","redux/slices/favoritesSlice.js","redux/slices/celciusSlice.js","components/CurrentWeatherComp.js","components/HomeScreen.js","hooks/useDebounce.js","components/FavoriteCityComp.js","components/FavoritesScreen.js","images/light-mode.jpg","images/night-mode.jpg","components/App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["themeSlice","createSlice","name","initialState","data","reducers","changeTheme","state","action","actions","NavBarComp","dispatch","useDispatch","theme","useSelector","btnBgColor","Navbar","className","bg","variant","console","log","Container","Brand","Button","style","border","color","backgroundColor","onClick","Nav","to","marginLeft","React","memo","getLocationAutocomplete","createAsyncThunk","cityName","a","getState","api","base","query","fetch","then","res","json","locationAutocompleteSlice","status","extraReducers","pending","fulfilled","payload","rejected","getCurrentCondition","locationKey","currentConditionSlice","getForecast","forecastSlice","getGeolocation","latLonStr","geolocationSlice","ForecastDay","daily","celcius","getDegreesStr","useCallback","fahren","toFixed","Date","getDay","src","Day","Icon","alt","Temperature","Minimum","Value","Maximum","favoritesSlice","addToFavorites","push","removeFromFavorites","favoritesArr","filter","fav","id","celciusSlice","changeDegree","CurrentWeatherComp","city","geolocationData","geolocation","currentConditionData","currentCondition","favorites","checkIfFavorite","length","some","localStorage","getItem","favoritesHandler","LocalizedName","currentWeather","Metric","Unit","Imperial","WeatherText","HomeScreen","match","useState","setQuery","displaySuggestionBox","setDisplaySuggestionBox","setCity","debouncedQuery","value","delay","setDebouncedQuery","useEffect","handler","setTimeout","clearTimeout","useDebounce","forecast","locationAutocomplete","undefined","params","setItem","find","InputGroup","width","FormControl","placeholder","onChange","e","target","autoComplete","map","location","index","Key","clickSuggestion","tabIndex","Country","Spinner","animation","marginTop","alert","DailyForecasts","FavoriteCityComp","WeatherIcon","height","FavoritesScreen","favoritesData","App","bgImage","darkModeImg","lightModeImg","fontColor","backgroundImage","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","currentConditionReducer","locationAutocompleteReducer","forecastReducer","geolocationReducer","favoritesReducer","celciusReducer","themeReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.b72f6ddf.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const themeSlice = createSlice({\r\n\tname: 'theme',\r\n\tinitialState: {\r\n\t\tdata: 'dark'\r\n\t},\r\n\treducers: {\r\n\t\tchangeTheme: (state, action) => {\r\n\t\t\tif (state.data === 'dark') {\r\n\t\t\t\tstate.data = 'light';\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tstate.data = 'dark';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n});\r\n\r\nexport const { changeTheme } = themeSlice.actions;\r\n\r\nexport default themeSlice.reducer;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Container, Nav, Button } from 'react-bootstrap';\r\nimport './NavBarComp.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeTheme } from '../redux/slices/themeSlice';\r\n\r\nconst NavBarComp = () => {\r\n\tconst dispatch = useDispatch();\r\n\tlet { data: theme } = useSelector(state => state.theme);\r\n\r\n\tlet btnBgColor = theme === 'dark' ? '#212529' : '#f8f9fa';\r\n\r\n\treturn (\r\n\t\t<Navbar className=\"navbar\" bg={theme} variant={theme}>\r\n\t\t\t{console.log('Hello from Nav Comp')}\r\n\t\t\t<Container className=\"navbar-container\">\r\n\t\t\t\t<Navbar.Brand className=\"navbar-brand\">Herolo Weather Task</Navbar.Brand>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tvariant=\"outline-secondary\"\r\n\t\t\t\t\tstyle={{ border: '0px', color: 'darkgray', backgroundColor: btnBgColor }}\r\n\t\t\t\t\tonClick={() => dispatch(changeTheme())}\r\n\t\t\t\t>\r\n\t\t\t\t\t{theme === 'dark' ? <i className=\"fas fa-sun\" /> : <i className=\"fas fa-moon\" />}\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Nav className=\"me-auto d-flex\">\r\n\t\t\t\t\t<Link to=\"/Elad-Ayaso-30-8-2021-\">Home</Link>\r\n\r\n\t\t\t\t\t<Link to=\"/Elad-Ayaso-30-8-2021-/favorites\" style={{ marginLeft: '12px' }}>\r\n\t\t\t\t\t\tFavorites\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</Nav>\r\n\t\t\t</Container>\r\n\t\t</Navbar>\r\n\t);\r\n};\r\n\r\nexport default React.memo(NavBarComp);\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nconst myKey = 'pTlggNCtyjllgOjeA8DqkvFbY7nADvhw';\r\n\r\nexport const getLocationAutocomplete = createAsyncThunk('location/getLocationAutocomplete', async (cityName, { dispatch, getState }) => {\r\n\tconst api = {\r\n\t\tbase: 'https://dataservice.accuweather.com/locations/v1/cities/autocomplete',\r\n\t\tquery: `?apikey=${myKey}&q=${cityName}`\r\n\t};\r\n\treturn fetch(api.base + api.query).then(res => res.json());\r\n});\r\n\r\nconst locationAutocompleteSlice = createSlice({\r\n\tname: 'locationAutocomplete',\r\n\tinitialState: {\r\n\t\tdata: [],\r\n\t\tstatus: null\r\n\t},\r\n\textraReducers: {\r\n\t\t[getLocationAutocomplete.pending]: (state, action) => {\r\n\t\t\tstate.status = 'loading';\r\n\t\t},\r\n\t\t[getLocationAutocomplete.fulfilled]: (state, { payload }) => {\r\n\t\t\tstate.data = payload;\r\n\t\t\tstate.status = 'success';\r\n\t\t},\r\n\t\t[getLocationAutocomplete.rejected]: (state, action) => {\r\n\t\t\tstate.status = 'failed';\r\n\t\t}\r\n\t}\r\n});\r\n\r\nexport default locationAutocompleteSlice.reducer;\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nconst myKey = 'pTlggNCtyjllgOjeA8DqkvFbY7nADvhw';\r\n\r\nexport const getCurrentCondition = createAsyncThunk('location/getCurrentCondition', async (locationKey, { dispatch, getState }) => {\r\n\tconst api = {\r\n\t\tbase: `https://dataservice.accuweather.com/currentconditions/v1/${locationKey}`,\r\n\t\tquery: `?apikey=${myKey}`\r\n\t};\r\n\treturn fetch(api.base + api.query).then(res => res.json());\r\n});\r\n\r\nconst currentConditionSlice = createSlice({\r\n\tname: 'currentCondition',\r\n\tinitialState: {\r\n\t\tdata: {},\r\n\t\tstatus: null\r\n\t},\r\n\textraReducers: {\r\n\t\t[getCurrentCondition.pending]: (state, action) => {\r\n\t\t\tstate.status = 'loading';\r\n\t\t},\r\n\t\t[getCurrentCondition.fulfilled]: (state, { payload }) => {\r\n\t\t\tstate.data = payload[0];\r\n\t\t\tstate.status = 'success';\r\n\t\t},\r\n\t\t[getCurrentCondition.rejected]: (state, action) => {\r\n\t\t\tstate.status = 'failed';\r\n\t\t}\r\n\t}\r\n});\r\n\r\nexport default currentConditionSlice.reducer;\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nconst myKey = 'pTlggNCtyjllgOjeA8DqkvFbY7nADvhw';\r\n\r\nexport const getForecast = createAsyncThunk('location/getForecast', async (locationKey, { dispatch, getState }) => {\r\n\tconst api = {\r\n\t\tbase: `https://dataservice.accuweather.com/forecasts/v1/daily/5day/${locationKey}`,\r\n\t\tquery: `?apikey=${myKey}`\r\n\t};\r\n\treturn fetch(api.base + api.query).then(res => res.json());\r\n});\r\n\r\nconst forecastSlice = createSlice({\r\n\tname: 'currentCondition',\r\n\tinitialState: {\r\n\t\tdata: [],\r\n\t\tstatus: null\r\n\t},\r\n\textraReducers: {\r\n\t\t[getForecast.pending]: (state, action) => {\r\n\t\t\tstate.status = 'loading';\r\n\t\t},\r\n\t\t[getForecast.fulfilled]: (state, { payload }) => {\r\n\t\t\tstate.data = payload;\r\n\t\t\tstate.status = 'success';\r\n\t\t},\r\n\t\t[getForecast.rejected]: (state, action) => {\r\n\t\t\tstate.status = 'failed';\r\n\t\t}\r\n\t}\r\n});\r\n\r\nexport default forecastSlice.reducer;\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nconst myKey = 'pTlggNCtyjllgOjeA8DqkvFbY7nADvhw';\r\n\r\nexport const getGeolocation = createAsyncThunk('location/getGeolocation', async (latLonStr, { dispatch, getState }) => {\r\n\tconst api = {\r\n\t\tbase: 'https://dataservice.accuweather.com/locations/v1/cities/geoposition/search',\r\n\t\tquery: `?apikey=${myKey}&q=${latLonStr}`\r\n\t};\r\n\treturn fetch(api.base + api.query).then(res => res.json());\r\n});\r\n\r\nconst geolocationSlice = createSlice({\r\n\tname: 'geolocation',\r\n\tinitialState: {\r\n\t\tdata: {},\r\n\t\tstatus: null\r\n\t},\r\n\textraReducers: {\r\n\t\t[getGeolocation.pending]: (state, action) => {\r\n\t\t\tstate.status = 'loading';\r\n\t\t},\r\n\t\t[getGeolocation.fulfilled]: (state, { payload }) => {\r\n\t\t\tstate.data = payload;\r\n\t\t\tstate.status = 'success';\r\n\t\t},\r\n\t\t[getGeolocation.rejected]: (state, action) => {\r\n\t\t\tstate.status = 'failed';\r\n\t\t}\r\n\t}\r\n});\r\n\r\nexport default geolocationSlice.reducer;\r\n","import React from 'react';\r\nimport { useCallback } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './ForecastDay.css';\r\n\r\nconst ForecastDay = ({ daily }) => {\r\n\tlet { data: celcius } = useSelector(state => state.celcius);\r\n\r\n\tconst getDegreesStr = useCallback(\r\n\t\tfahren => {\r\n\t\t\tif (celcius) {\r\n\t\t\t\tlet calcCelcius = (fahren - 32) / 1.8;\r\n\t\t\t\treturn `${calcCelcius.toFixed(1)}°C`;\r\n\t\t\t}\r\n\t\t\telse return `${fahren.toFixed(1)}°F`;\r\n\t\t},\r\n\t\t[ celcius ]\r\n\t);\r\n\r\n\tconst dayFinder = () => {\r\n\t\tlet d = new Date(daily.Date);\r\n\t\tlet days = [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday' ];\r\n\t\tlet day = days[d.getDay()];\r\n\t\treturn day;\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"weather-forecast-item\" style={{}}>\r\n\t\t\t{console.log('Hello from Forecast Comp')}\r\n\t\t\t<div className=\"day\">{dayFinder()}</div>\r\n\t\t\t<img src={`https://www.accuweather.com/images/weathericons/${daily.Day.Icon}.svg`} className=\"w-icon\" alt=\"\" />\r\n\t\t\t<div className=\"temp\">\r\n\t\t\t\t{getDegreesStr(daily.Temperature.Minimum.Value)} - {getDegreesStr(daily.Temperature.Maximum.Value)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default React.memo(ForecastDay);\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const favoritesSlice = createSlice({\r\n\tname: 'favorites',\r\n\tinitialState: {\r\n\t\tdata: [],\r\n\t\tstatus: null\r\n\t},\r\n\treducers: {\r\n\t\taddToFavorites: (state, action) => {\r\n\t\t\tstate.data.push(action.payload);\r\n\t\t},\r\n\t\tremoveFromFavorites: (state, action) => {\r\n\t\t\tlet favoritesArr = [ ...state.data ];\r\n\t\t\tstate.data = favoritesArr.filter(fav => fav.id !== action.payload.id);\r\n\t\t}\r\n\t}\r\n});\r\n\r\nexport const { addToFavorites, removeFromFavorites } = favoritesSlice.actions;\r\n\r\nexport default favoritesSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const celciusSlice = createSlice({\r\n\tname: 'celcius',\r\n\tinitialState: {\r\n\t\tdata: false\r\n\t},\r\n\treducers: {\r\n\t\tchangeDegree: (state, action) => {\r\n\t\t\tstate.data = !state.data;\r\n\t\t}\r\n\t}\r\n});\r\n\r\nexport const { changeDegree } = celciusSlice.actions;\r\n\r\nexport default celciusSlice.reducer;\r\n","import React, { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addToFavorites, removeFromFavorites } from '../redux/slices/favoritesSlice';\r\nimport { changeDegree } from '../redux/slices/celciusSlice';\r\nimport './CurrentWeatherComp.css';\r\n\r\nconst CurrentWeatherComp = ({ city }) => {\r\n\tconst dispatch = useDispatch();\r\n\tlet { data: geolocationData } = useSelector(state => state.geolocation);\r\n\tlet { data: currentConditionData } = useSelector(state => state.currentCondition);\r\n\tlet { data: favorites } = useSelector(state => state.favorites);\r\n\tlet { data: celcius } = useSelector(state => state.celcius);\r\n\r\n\tconst checkIfFavorite = useCallback(\r\n\t\t() => {\r\n\t\t\tif (favorites.length === 0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn favorites.some(fav => localStorage.getItem('locationKey') === fav.id);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ favorites ]\r\n\t);\r\n\r\n\tconst favoritesHandler = useCallback(\r\n\t\t() => {\r\n\t\t\tif (checkIfFavorite()) {\r\n\t\t\t\tdispatch(\r\n\t\t\t\t\tremoveFromFavorites({\r\n\t\t\t\t\t\tid: localStorage.getItem('locationKey')\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tdispatch(\r\n\t\t\t\t\taddToFavorites({\r\n\t\t\t\t\t\tid: localStorage.getItem('locationKey'),\r\n\t\t\t\t\t\tname: city !== '' ? city : geolocationData.LocalizedName,\r\n\t\t\t\t\t\tcurrentWeather: { ...currentConditionData }\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t},\r\n\t\t[ dispatch, checkIfFavorite, city, currentConditionData, geolocationData ]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div className=\"current-location\">\r\n\t\t\t{console.log('Hello from Current Comp')}\r\n\t\t\t<div className=\"location-weather-container\">\r\n\t\t\t\t<div className=\"location-info\">\r\n\t\t\t\t\t{city !== '' ? city : geolocationData.LocalizedName}\r\n\t\t\t\t\t<div className=\"favorites-icon\" onClick={favoritesHandler}>\r\n\t\t\t\t\t\t{checkIfFavorite() ? <i className=\"fas fa-heart\" /> : <i className=\"far fa-heart\" />}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"weather-info\">\r\n\t\t\t\t\t<div className=\"degrees-info\">\r\n\t\t\t\t\t\t{celcius ? (\r\n\t\t\t\t\t\t\t`${currentConditionData.Temperature.Metric.Value}°${currentConditionData.Temperature.Metric.Unit}`\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t`${currentConditionData.Temperature.Imperial.Value}°${currentConditionData.Temperature.Imperial.Unit}`\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t<div className=\"degree-change-btn\" onClick={() => dispatch(changeDegree())}>\r\n\t\t\t\t\t\t\t|{celcius ? currentConditionData.Temperature.Imperial.Unit : currentConditionData.Temperature.Metric.Unit}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"weather-description\">{currentConditionData.WeatherText}</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default React.memo(CurrentWeatherComp);\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getLocationAutocomplete } from '../redux/slices/locationAutocompleteSlice';\r\nimport { getCurrentCondition } from '../redux/slices/currentConditionSlice';\r\nimport { getForecast } from '../redux/slices/forecastSlice';\r\nimport { getGeolocation } from '../redux/slices/geolocationSlice';\r\nimport ForecastDay from './ForecastDay';\r\nimport CurrentWeatherComp from './CurrentWeatherComp';\r\nimport { FormControl, InputGroup, Spinner } from 'react-bootstrap';\r\nimport './HomeScreen.css';\r\nimport useDebounce from '../hooks/useDebounce';\r\n\r\nconst HomeScreen = ({ match }) => {\r\n\tconst [ query, setQuery ] = useState('');\r\n\tconst [ displaySuggestionBox, setDisplaySuggestionBox ] = useState(false);\r\n\tconst [ city, setCity ] = useState('');\r\n\t//debounce\r\n\tconst debouncedQuery = useDebounce(query, 1000);\r\n\r\n\tconst dispatch = useDispatch();\r\n\tlet currentCondition = useSelector(state => state.currentCondition);\r\n\tlet forecast = useSelector(state => state.forecast);\r\n\tlet locationAutocomplete = useSelector(state => state.locationAutocomplete);\r\n\tlet geolocation = useSelector(state => state.geolocation);\r\n\tlet { data: favorites } = useSelector(state => state.favorites);\r\n\tlet { data: celcius } = useSelector(state => state.celcius);\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tif (match.params.id !== undefined) {\r\n\t\t\t\tdispatch(getCurrentCondition(match.params.id));\r\n\t\t\t\tdispatch(getForecast(match.params.id));\r\n\t\t\t\tlocalStorage.setItem('locationKey', match.params.id);\r\n\t\t\t\tsetCity(favorites.find(fav => fav.id === match.params.id).name);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdispatch(getForecast('215854'));\r\n\t\t\t\tdispatch(getGeolocation('32.045, 34.77'));\r\n\t\t\t\tdispatch(getCurrentCondition('215854'));\r\n\t\t\t\tlocalStorage.setItem('locationKey', '215854');\r\n\t\t\t\tsetCity('');\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ dispatch, match.params.id ]\r\n\t);\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tif (debouncedQuery) {\r\n\t\t\t\tdispatch(getLocationAutocomplete(debouncedQuery));\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ dispatch, debouncedQuery ]\r\n\t);\r\n\r\n\tconst handleSearch = e => {\r\n\t\tconst { value } = e.target;\r\n\t\tsetQuery(value);\r\n\t};\r\n\r\n\tconst clickSuggestion = location => {\r\n\t\tsetQuery(location.LocalizedName);\r\n\t\tdispatch(getCurrentCondition(location.Key));\r\n\t\tdispatch(getForecast(location.Key));\r\n\t\tsetCity(location.LocalizedName);\r\n\t\tlocalStorage.setItem('locationKey', location.Key);\r\n\t};\r\n\r\n\tconst suggestionBoxHandler = () => {\r\n\t\tif (displaySuggestionBox) {\r\n\t\t\tsetDisplaySuggestionBox(false);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"homescreen\" onClick={suggestionBoxHandler}>\r\n\t\t\t{console.log('Hello from Home Comp')}\r\n\t\t\t<InputGroup className=\"input-group\" style={{ width: '350px' }}>\r\n\t\t\t\t<FormControl\r\n\t\t\t\t\tclassName=\"input-textfield\"\r\n\t\t\t\t\tplaceholder=\"Enter city here\"\r\n\t\t\t\t\tvalue={query}\r\n\t\t\t\t\tonClick={() => setDisplaySuggestionBox(true)}\r\n\t\t\t\t\tonChange={handleSearch}\r\n\t\t\t\t\tautoComplete=\"off\"\r\n\t\t\t\t/>\r\n\t\t\t</InputGroup>\r\n\t\t\t{displaySuggestionBox && locationAutocomplete.status === 'success' ? (\r\n\t\t\t\t<div className=\"autocomplete-container\">\r\n\t\t\t\t\t{locationAutocomplete.data.map((location, index) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div className=\"option\" key={index} onClick={() => clickSuggestion(location)} tabIndex=\"0\">\r\n\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t{location.LocalizedName}, {location.Country.LocalizedName}\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<div />\r\n\t\t\t)}\r\n\r\n\t\t\t{currentCondition.status === 'loading' ||\r\n\t\t\tforecast.status === 'loading' ||\r\n\t\t\tgeolocation.status === 'loading' ||\r\n\t\t\tforecast.status === null ? (\r\n\t\t\t\t<Spinner animation=\"border\" style={{ marginTop: '50px' }} />\r\n\t\t\t) : currentCondition.status === 'failed' || forecast.status === 'failed' || geolocation.status === 'failed' ? (\r\n\t\t\t\talert('The allowed number of requests has been exceeded!')\r\n\t\t\t) : (\r\n\t\t\t\t<div className=\"weather-container\">\r\n\t\t\t\t\t<CurrentWeatherComp city={city} />\r\n\t\t\t\t\t<div className=\"forecast-info\">\r\n\t\t\t\t\t\t{forecast.data.DailyForecasts.map((daily, index) => <ForecastDay key={index} daily={daily} />)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\nexport default React.memo(HomeScreen);\r\n","import { useState, useEffect } from 'react';\r\n\r\nexport default function useDebounce(value, delay){\r\n\tconst [ debouncedQuery, setDebouncedQuery ] = useState(value);\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tconst handler = setTimeout(() => {\r\n\t\t\t\tsetDebouncedQuery(value);\r\n\t\t\t}, delay);\r\n\t\t\treturn () => {\r\n\t\t\t\tclearTimeout(handler);\r\n\t\t\t};\r\n\t\t},\r\n\t\t[ value, delay ]\r\n\t);\r\n\treturn debouncedQuery;\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './FavoriteCityComp.css';\r\n\r\nconst FavoriteCityComp = ({ fav }) => {\r\n\treturn (\r\n\t\t<div className=\"favorite-location\">\r\n\t\t\t{console.log('Hello from MyCity Comp')}\r\n\t\t\t<div className=\"location-name\">\r\n\t\t\t\t<Link to={`/Elad-Ayaso-30-8-2021-/${fav.id}`}>{fav.name}</Link>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"location-degree\">\r\n\t\t\t\t{fav.currentWeather.Temperature.Metric.Value}°{fav.currentWeather.Temperature.Metric.Unit}\r\n\t\t\t</div>\r\n\t\t\t<img\r\n\t\t\t\tsrc={`https://www.accuweather.com/images/weathericons/${fav.currentWeather.WeatherIcon}.svg`}\r\n\t\t\t\tclassName=\"w-icon\"\r\n\t\t\t\twidth=\"80px\"\r\n\t\t\t\theight=\"80px\"\r\n\t\t\t\talt=\"\"\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default React.memo(FavoriteCityComp);\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport FavoriteCityComp from './FavoriteCityComp';\r\nimport './FavoritesScreen.css';\r\n\r\nconst FavoritesScreen = () => {\r\n\tlet { data: favoritesData } = useSelector(state => state.favorites);\r\n\r\n\treturn (\r\n\t\t<div className=\"favoritesscreen\">\r\n\t\t\t{console.log('Hello from Favorites Comp')}\r\n\t\t\t<h2 className=\"favorites-headline\">My Favorites</h2>\r\n\t\t\t{favoritesData.length === 0 ? (\r\n\t\t\t\t<h5>You Don't Have Any Favorites Yet!</h5>\r\n\t\t\t) : (\r\n\t\t\t\t<div className=\"favorites-grid\">{favoritesData.map((fav, index) => <FavoriteCityComp key={index} fav={fav} />)}</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default React.memo(FavoritesScreen);\r\n","export default __webpack_public_path__ + \"static/media/light-mode.46247aaa.jpg\";","export default __webpack_public_path__ + \"static/media/night-mode.94f5695e.jpg\";","import { Route, Switch } from 'react-router-dom';\r\nimport NavBarComp from './NavBarComp';\r\nimport HomeScreen from './HomeScreen';\r\nimport FavoritesScreen from './FavoritesScreen';\r\nimport lightModeImg from '../images/light-mode.jpg';\r\nimport darkModeImg from '../images/night-mode.jpg';\r\nimport './App.css';\r\nimport { useSelector } from 'react-redux';\r\n\r\nfunction App(){\r\n\tlet { data: theme } = useSelector(state => state.theme);\r\n\r\n\tlet bgImage = theme === 'dark' ? darkModeImg : lightModeImg;\r\n\tlet fontColor = theme === 'dark' ? '#FFF' : '#000';\r\n\r\n\treturn (\r\n\t\t<div className=\"App\" style={{ color: fontColor, backgroundImage: `url(${bgImage})` }}>\r\n\t\t\t{console.log('Hello from App Comp')}\r\n\t\t\t<NavBarComp />\r\n\t\t\t<Switch>\r\n\t\t\t\t<Route path=\"/:projectname/favorites\" component={FavoritesScreen} />\r\n\t\t\t\t<Route path=\"/:projectname/:id\" component={HomeScreen} />\r\n\t\t\t\t<Route path=\"/:projectname\" component={HomeScreen} />\r\n\t\t\t</Switch>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport currentConditionReducer from './slices/currentConditionSlice';\r\nimport locationAutocompleteReducer from './slices/locationAutocompleteSlice';\r\nimport forecastReducer from './slices/forecastSlice';\r\nimport geolocationReducer from './slices/geolocationSlice';\r\nimport favoritesReducer from './slices/favoritesSlice';\r\nimport celciusReducer from './slices/celciusSlice';\r\nimport themeReducer from './slices/themeSlice';\r\n\r\nexport default configureStore({\r\n\treducer: {\r\n\t\tcurrentCondition: currentConditionReducer,\r\n\t\tlocationAutocomplete: locationAutocompleteReducer,\r\n\t\tforecast: forecastReducer,\r\n\t\tgeolocation: geolocationReducer,\r\n\t\tfavorites: favoritesReducer,\r\n\t\tcelcius: celciusReducer,\r\n\t\ttheme: themeReducer\r\n\t}\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<BrowserRouter>\n\t\t\t\t<App />\n\t\t\t</BrowserRouter>\n\t\t</Provider>,\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}