{"version":3,"sources":["components/NavBarComp.js","redux/slices/locationAutocompleteSlice.js","redux/slices/currentConditionSlice.js","redux/slices/forecastSlice.js","redux/slices/geolocationSlice.js","components/ForecastDay.js","redux/slices/favoritesSlice.js","components/CurrentWeatherComp.js","components/HomeScreen.js","components/FavoriteCityComp.js","components/FavoritesScreen.js","images/light-mode.jpg","images/night-mode.jpg","components/App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["NavBarComp","handleThemeChange","theme","iconStyle","setIconStyle","changeIconOpacity","e","style","_reactName","color","opacity","btnBgColor","Navbar","className","bg","variant","Container","Brand","Button","border","backgroundColor","onClick","onMouseEnter","onMouseLeave","Nav","to","marginLeft","getLocationAutocomplete","createAsyncThunk","cityName","a","dispatch","getState","api","base","query","fetch","then","res","json","locationAutocompleteSlice","createSlice","name","initialState","data","status","extraReducers","pending","state","action","fulfilled","payload","rejected","getCurrentCondition","locationKey","currentConditionSlice","favoritesConditions","favoritesConditionsArr","filter","fav","id","getForecast","forecastSlice","getGeolocation","latLonStr","geolocationSlice","ForecastDay","daily","getDegreesStr","Date","getDay","src","Day","Icon","alt","Temperature","Minimum","Value","Maximum","favoritesSlice","reducers","addToFavorites","push","removeFromFavorites","favoritesArr","actions","CurrentWeatherComp","celcius","setCelcius","city","useDispatch","geolocationData","useSelector","geolocation","currentConditionData","currentCondition","favorites","checkIfFavorite","length","some","localStorage","getItem","LocalizedName","Key","currentWeather","Imperial","Unit","Metric","WeatherText","HomeScreen","match","useState","setQuery","displaySuggestionBox","setDisplaySuggestionBox","setCity","forecastData","forecast","locationAutocompleteData","locationAutocomplete","useEffect","undefined","params","console","log","find","setItem","search","fahren","toFixed","InputGroup","width","FormControl","placeholder","value","onChange","event","target","autoComplete","map","location","index","clickSuggestion","tabIndex","Country","DailyForecasts","Spinner","animation","marginTop","FavoriteCityComp","history","WeatherIcon","height","FavoritesScreen","favoritesData","App","setTheme","darkModeImg","bgImage","setBgImage","fontColor","setFontColor","backgroundImage","lightModeImg","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","currentConditionReducer","locationAutocompleteReducer","forecastReducer","geolocationReducer","favoritesReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"8XA4CeA,EAvCI,SAAC,GAA2D,IAAzDC,EAAwD,EAAxDA,kBAAmBC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aACpDC,EAAoB,SAAAC,GACzB,GAAc,SAAVJ,EAAkB,CACrB,IAAIK,EAAyB,iBAAjBD,EAAEE,WAAgC,CAAEC,MAAM,aAAiB,CAAEA,MAAO,YAChFL,EAAaG,OAET,CACJ,IAAIA,EAAyB,iBAAjBD,EAAEE,WAAgC,CAAEC,MAAO,UAAWC,QAAS,IAAQ,CAAED,MAAO,aAC5FL,EAAaG,KAIXI,EAAuB,SAAVT,EAAmB,UAAY,UAEhD,OACC,cAACU,EAAA,EAAD,CAAQC,UAAU,SAASC,GAAIZ,EAAOa,QAASb,EAA/C,SACC,eAACc,EAAA,EAAD,CAAWH,UAAU,mBAArB,UACC,cAACD,EAAA,EAAOK,MAAR,kCACA,cAACC,EAAA,EAAD,CACCH,QAAQ,oBACRR,MAAO,CAAEY,OAAQ,MAAOV,MAAO,WAAYW,gBAAiBT,GAC5DU,QAASpB,EACTqB,aAAc,SAAAhB,GAAC,OAAID,EAAkBC,IACrCiB,aAAc,SAAAjB,GAAC,OAAID,EAAkBC,IALtC,SAOY,SAAVJ,EAAmB,mBAAGW,UAAU,aAAaN,MAAOJ,IAAgB,mBAAGU,UAAU,cAAcN,MAAOJ,MAExG,eAACqB,EAAA,EAAD,CAAKX,UAAU,iBAAf,UACC,cAAC,IAAD,CAAMY,GAAG,IAAT,kBAEA,cAAC,IAAD,CAAMA,GAAG,aAAalB,MAAO,CAAEmB,WAAY,QAA3C,gC,+CC/BQC,EAA0BC,YAAiB,mCAAD,uCAAqC,WAAOC,EAAP,kBAAAC,EAAA,+DAAmBC,SAAnB,EAA6BC,SAClHC,EAAM,CACXC,KAAM,uEACNC,MAAM,WAAD,OALO,mCAKP,cAAwBN,IAH6D,kBAKpFO,MAAMH,EAAIC,KAAOD,EAAIE,OAAOE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,WALwC,2CAArC,yDA4BxCC,EApBmBC,YAAY,CAC7CC,KAAM,uBACNC,aAAc,CACbC,KAAM,GACNC,OAAQ,MAETC,eAAa,mBACXnB,EAAwBoB,SAAU,SAACC,EAAOC,GAC1CD,EAAMH,OAAS,aAFJ,cAIXlB,EAAwBuB,WAAY,SAACF,EAAD,GAAyB,IAAfG,EAAc,EAAdA,QAC9CH,EAAMJ,KAAOO,EACbH,EAAMH,OAAS,aANJ,cAQXlB,EAAwByB,UAAW,SAACJ,EAAOC,GAC3CD,EAAMH,OAAS,YATJ,KAcd,Q,QC5BaQ,EAAsBzB,YAAiB,+BAAD,uCAAiC,WAAO0B,EAAP,kBAAAxB,EAAA,+DAAsBC,SAAtB,EAAgCC,SAC7GC,EAAM,CACXC,KAAK,4DAAD,OAA8DoB,GAClEnB,MAAM,WAAD,OALO,qCAEsE,kBAK5EC,MAAMH,EAAIC,KAAOD,EAAIE,OAAOE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,WALgC,2CAAjC,yDAiCpCgB,EAzBed,YAAY,CACzCC,KAAM,mBACNC,aAAc,CACbC,KAAM,GACNY,oBAAqB,GACrBX,OAAQ,MAETC,eAAa,mBACXO,EAAoBN,SAAU,SAACC,EAAOC,GACtCD,EAAMH,OAAS,qCAFJ,cAIXQ,EAAoBH,WAAY,SAACF,EAAD,GAAyB,IAAfG,EAAc,EAAdA,QAC1CH,EAAMJ,KAAOO,EAAQ,GACrBH,EAAMH,OAAS,qCANJ,cAQXQ,EAAoBD,UAAW,SAACJ,EAAOC,GACvCD,EAAMH,OAAS,oCATJ,+CAWmB,SAACG,EAAOC,GACtC,IAAIQ,EAAsB,YAAQT,EAAMQ,qBACxCR,EAAMQ,oBAAsBC,EAAuBC,QAAO,SAAAC,GAAG,OAAIA,EAAIC,KAAOX,EAAOE,QAAQS,SAbhF,KAkBd,QCjCaC,EAAcjC,YAAiB,uBAAD,uCAAyB,WAAO0B,EAAP,kBAAAxB,EAAA,+DAAsBC,SAAtB,EAAgCC,SAC7FC,EAAM,CACXC,KAAK,+DAAD,OAAiEoB,GACrEnB,MAAM,WAAD,OALO,qCAEsD,kBAK5DC,MAAMH,EAAIC,KAAOD,EAAIE,OAAOE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,WALgB,2CAAzB,yDA4B5BuB,EApBOrB,YAAY,CACjCC,KAAM,mBACNC,aAAc,CACbC,KAAM,GACNC,OAAQ,MAETC,eAAa,mBACXe,EAAYd,SAAU,SAACC,EAAOC,GAC9BD,EAAMH,OAAS,aAFJ,cAIXgB,EAAYX,WAAY,SAACF,EAAD,GAAyB,IAAfG,EAAc,EAAdA,QAClCH,EAAMJ,KAAOO,EACbH,EAAMH,OAAS,aANJ,cAQXgB,EAAYT,UAAW,SAACJ,EAAOC,GAC/BD,EAAMH,OAAS,YATJ,KAcd,QC5BakB,EAAiBnC,YAAiB,0BAAD,uCAA4B,WAAOoC,EAAP,kBAAAlC,EAAA,+DAAoBC,SAApB,EAA8BC,SACjGC,EAAM,CACXC,KAAM,6EACNC,MAAM,WAAD,OALO,mCAKP,cAAwB6B,IAH2C,kBAKlE5B,MAAMH,EAAIC,KAAOD,EAAIE,OAAOE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,WALsB,2CAA5B,yDA4B/B0B,EApBUxB,YAAY,CACpCC,KAAM,cACNC,aAAc,CACbC,KAAM,GACNC,OAAQ,MAETC,eAAa,mBACXiB,EAAehB,SAAU,SAACC,EAAOC,GACjCD,EAAMH,OAAS,aAFJ,cAIXkB,EAAeb,WAAY,SAACF,EAAD,GAAyB,IAAfG,EAAc,EAAdA,QACrCH,EAAMJ,KAAOO,EACbH,EAAMH,OAAS,aANJ,cAQXkB,EAAeX,UAAW,SAACJ,EAAOC,GAClCD,EAAMH,OAAS,YATJ,KAcd,QCVeqB,G,MAnBK,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,cAQ7B,OACC,sBAAKvD,UAAU,wBAAwBN,MAAO,GAA9C,UACC,qBAAKM,UAAU,MAAf,SAPU,CAAE,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YADvE,IAAIwD,KAAKF,EAAME,MAENC,YAOhB,qBAAKC,IAAG,0DAAqDJ,EAAMK,IAAIC,KAA/D,QAA2E5D,UAAU,SAAS6D,IAAI,KAC1G,sBAAK7D,UAAU,OAAf,UACEuD,EAAcD,EAAMQ,YAAYC,QAAQC,OAD1C,MACqDT,EAAcD,EAAMQ,YAAYG,QAAQD,e,QCdnFE,EAAiBtC,YAAY,CACzCC,KAAM,YACNC,aAAc,CACbC,KAAM,GACNC,OAAQ,MAETmC,SAAU,CACTC,eAAgB,SAACjC,EAAOC,GACvBD,EAAMJ,KAAKsC,KAAKjC,EAAOE,UAExBgC,oBAAqB,SAACnC,EAAOC,GAC5B,IAAImC,EAAY,YAAQpC,EAAMJ,MAC9BI,EAAMJ,KAAOwC,EAAa1B,QAAO,SAAAC,GAAG,OAAIA,EAAIC,KAAOX,EAAOE,QAAQS,UAK9D,EAAgDmB,EAAeM,QAAvDJ,EAAR,EAAQA,eAAgBE,EAAxB,EAAwBA,oBAEhBJ,IAAf,QCyCeO,G,MAzDY,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,QAASC,EAAsC,EAAtCA,WAAYC,EAA0B,EAA1BA,KAAMrB,EAAoB,EAApBA,cAClDrC,EAAW2D,cACLC,EAAoBC,aAAY,SAAA5C,GAAK,OAAIA,EAAM6C,eAArDjD,KACMkD,EAAyBF,aAAY,SAAA5C,GAAK,OAAIA,EAAM+C,oBAA1DnD,KACMoD,EAAcJ,aAAY,SAAA5C,GAAK,OAAIA,EAAMgD,aAA/CpD,KAEAqD,EAAkB,WACvB,OAAyB,IAArBD,EAAUE,QAIDF,EAAUG,MAAK,SAAAxC,GAAG,OAAIyC,aAAaC,QAAQ,iBAAmB1C,EAAIC,OAuBhF,OACC,qBAAK/C,UAAU,mBAAf,SACC,sBAAKA,UAAU,6BAAf,UACC,sBAAKA,UAAU,gBAAf,UACW,KAAT4E,EAAcE,EAAgBW,cAAgBb,EAC/C,qBAAK5E,UAAU,iBAAiBQ,QAvBX,WACpB4E,IACHlE,EACCoD,EAAoB,CACnBvB,GAA4C,OAAxCwC,aAAaC,QAAQ,eAA0BD,aAAaC,QAAQ,eAAiBV,EAAgBY,OAK3GxE,EACCkD,EAAe,CACdrB,GAA4C,OAAxCwC,aAAaC,QAAQ,eAA0BD,aAAaC,QAAQ,eAAiBV,EAAgBY,IACzG7D,KAAe,KAAT+C,EAAcA,EAAOE,EAAgBW,cAC3CE,eAAe,eAAMV,OAUrB,SACEG,IAAoB,mBAAGpF,UAAU,iBAAoB,mBAAGA,UAAU,sBAGrE,sBAAKA,UAAU,eAAf,UACC,sBAAKA,UAAU,eAAf,UACEuD,EAAc0B,EAAqBnB,YAAY8B,SAAS5B,OACzD,sBAAKhE,UAAU,oBAAoBQ,QAAS,kBAAMmE,GAAYD,IAA9D,cACGA,EAAUO,EAAqBnB,YAAY8B,SAASC,KAAOZ,EAAqBnB,YAAYgC,OAAOD,WAGvG,qBAAK7F,UAAU,sBAAf,SAAsCiF,EAAqBc,wB,wBCwDjDC,G,MApGI,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACrB,EAA4BC,mBAAS,IAArC,mBAAQ5E,EAAR,KAAe6E,EAAf,KACA,EAA0DD,oBAAS,GAAnE,mBAAQE,EAAR,KAA8BC,EAA9B,KACA,EAA0BH,mBAAS,IAAnC,mBAAQtB,EAAR,KAAc0B,EAAd,KACA,EAAgCJ,oBAAS,GAAzC,mBAAQxB,EAAR,KAAiBC,EAAjB,KACMzD,EAAW2D,cACLI,EAAyBF,aAAY,SAAA5C,GAAK,OAAIA,EAAM+C,oBAA1DnD,KACMwE,EAAiBxB,aAAY,SAAA5C,GAAK,OAAIA,EAAMqE,YAAlDzE,KACM0E,EAA6B1B,aAAY,SAAA5C,GAAK,OAAIA,EAAMuE,wBAA9D3E,KACM+C,EAAoBC,aAAY,SAAA5C,GAAK,OAAIA,EAAM6C,eAArDjD,KACMoD,EAAcJ,aAAY,SAAA5C,GAAK,OAAIA,EAAMgD,aAA/CpD,KAEN4E,qBAAU,gBACeC,IAApBX,EAAMY,OAAO9D,IAChB+D,QAAQC,IAAId,EAAMY,OAAO9D,IACzB7B,EAASgC,EAAe,kBACxBhC,EAASsB,EAAoByD,EAAMY,OAAO9D,KAC1C7B,EAAS8B,EAAYiD,EAAMY,OAAO9D,KAClCuD,EAAQnB,EAAU6B,MAAK,SAAAlE,GAAG,OAAIA,EAAIC,KAAOkD,EAAMY,OAAO9D,MAAIlB,QAG1DX,EAASgC,EAAe,kBACxBhC,EAASsB,EAAoB,WAC7BtB,EAAS8B,EAAY,WACrBuC,aAAa0B,QAAQ,cAAe,UACpCX,EAAQ,OAEP,IAEH,IAAMY,EAAM,uCAAG,WAAMlG,GAAN,SAAAC,EAAA,sDACdC,EAASJ,EAAwBE,IADnB,2CAAH,sDAINuC,EAAgB,SAAA4D,GACrB,OAAIzC,EAEG,GAAN,SADmByC,EAAS,IAAM,KACZC,QAAQ,GAA9B,SAEI,UAAUD,EAAOC,QAAQ,GAAzB,UAiBN,OACC,sBAAKpH,UAAU,aAAaQ,QAPA,WACxB4F,GACHC,GAAwB,IAKzB,UACC,cAACgB,EAAA,EAAD,CAAYrH,UAAU,cAAcN,MAAO,CAAE4H,MAAO,SAApD,SACC,cAACC,EAAA,EAAD,CACCvH,UAAU,kBACVwH,YAAY,kBACZC,MAAOnG,EACPd,QAAS,kBAAM6F,GAAwB,IACvCqB,SAAU,SAAAC,GACTT,EAAOS,EAAMC,OAAOH,OACpBtB,EAASwB,EAAMC,OAAOH,QAEvBI,aAAa,UAGdzB,GAAwBK,EAAyBpB,OAAS,EAC1D,qBAAKrF,UAAU,yBAAf,SACEyG,EAAyBqB,KAAI,SAACC,EAAUC,GACxC,OACC,qBAAKhI,UAAU,SAAqBQ,QAAS,kBAjC3B,SAAAuH,GACvB5B,EAAS4B,EAAStC,eAClBvE,EAASsB,EAAoBuF,EAASrC,MACtCxE,EAAS8B,EAAY+E,EAASrC,MAC9BY,EAAQyB,EAAStC,eACjBF,aAAa0B,QAAQ,cAAec,EAASrC,KA4BWuC,CAAgBF,IAAWG,SAAS,IAAvF,SACC,iCACEH,EAAStC,cADX,KAC4BsC,EAASI,QAAQ1C,kBAFjBuC,QAShC,6BAGqCpB,IAArC3B,EAAqBc,kBAA6Da,IAAhCL,EAAa6B,qBAAwDxB,IAAxB9B,EAAgBY,IAC/G,cAAC2C,EAAA,EAAD,CAASC,UAAU,SAAS5I,MAAO,CAAE6I,UAAW,UAEhD,sBAAKvI,UAAU,oBAAf,UACC,cAAC,EAAD,CAAoB4E,KAAMA,EAAMF,QAASA,EAASC,WAAYA,EAAYpB,cAAeA,IAEzF,qBAAKvD,UAAU,gBAAf,SACEuG,EAAa6B,eAAeN,KAAI,SAACxE,EAAO0E,GAAR,OAAkB,cAAC,EAAD,CAAyB1E,MAAOA,EAAOC,cAAeA,GAApCyE,gBC3E5DQ,G,MAxBU,SAAC,GAAsB,IAApB1F,EAAmB,EAAnBA,IAAK2F,EAAc,EAAdA,QAKhC,OACC,sBAAKzI,UAAU,oBAAf,UACC,qBAAKA,UAAU,gBAAf,SACC,cAACK,EAAA,EAAD,CAAQG,QAPE,WACZ+E,aAAa0B,QAAQ,cAAenE,EAAIC,IACxC0F,EAAQpE,KAAR,WAAiBvB,EAAIC,MAKnB,SAAwBD,EAAIjB,SAE7B,sBAAK7B,UAAU,kBAAf,UACE8C,EAAI6C,eAAe7B,YAAYgC,OAAO9B,MADxC,OACgDlB,EAAI6C,eAAe7B,YAAYgC,OAAOD,QAEtF,qBACCnC,IAAG,0DAAqDZ,EAAI6C,eAAe+C,YAAxE,QACH1I,UAAU,SACVsH,MAAM,OACNqB,OAAO,OACP9E,IAAI,UCHO+E,G,MAfS,WACvB,IAAYC,EAAkB9D,aAAY,SAAA5C,GAAK,OAAIA,EAAMgD,aAAnDpD,KAEN,OACC,sBAAK/B,UAAU,kBAAf,UACC,oBAAIA,UAAU,qBAAd,0BAC0B,IAAzB6I,EAAcxD,OACd,mEAEA,qBAAKrF,UAAU,iBAAf,SAAiC6I,EAAcf,KAAI,SAAChF,EAAKkF,GAAN,OAAgB,cAAC,EAAD,CAA8BlF,IAAKA,GAAZkF,aCd/E,MAA0B,uCCA1B,MAA0B,uC,MC0C1Bc,MAjCf,WACC,MAA4B5C,mBAAS,QAArC,mBAAQ7G,EAAR,KAAe0J,EAAf,KACA,EAAgC7C,mBAAS8C,GAAzC,mBAAQC,EAAR,KAAiBC,EAAjB,KACA,EAAoChD,mBAAS,QAA7C,mBAAQiD,EAAR,KAAmBC,EAAnB,KACA,EAAoClD,mBAAS,IAA7C,mBAAQ5G,EAAR,KAAmBC,EAAnB,KAiBA,OACC,sBAAKS,UAAU,MAAMN,MAAO,CAAEE,MAAOuJ,EAAWE,gBAAgB,OAAD,OAASJ,EAAT,MAA/D,UACC,cAAC,EAAD,CAAY7J,kBAjBY,WACX,SAAVC,GACH0J,EAAS,SACTG,EAAWI,GACXF,EAAa,QACb7J,EAAa,CAAEK,MAAO,UAAWC,QAAS,OAG1CkJ,EAAS,QACTG,EAAWF,GACXI,EAAa,QACb7J,EAAa,CAAEK,MAAO,gBAM4BP,MAAOA,EAAOC,UAAWA,EAAWC,aAAcA,IACpG,eAAC,IAAD,WACC,cAAC,IAAD,CAAOgK,KAAK,aAAaC,UAAWZ,IACpC,cAAC,IAAD,CAAOW,KAAK,OAAOC,UAAWxD,IAC9B,cAAC,IAAD,CAAOuD,KAAK,IAAIC,UAAWxD,WCxBhByD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnI,MAAK,YAAkD,IAA/CoI,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCACO,G,MAAAA,YAAe,CAC7BC,QAAS,CACRhF,iBAAkBiF,EAClBzD,qBAAsB0D,EACtB5D,SAAU6D,EACVrF,YAAasF,EACbnF,UAAWoF,MCJbC,IAASC,OACR,eAAC,IAAMC,WAAP,WACC,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACC,cAAC,IAAD,UACC,cAAC,EAAD,QAHH,OAOAC,SAASC,eAAe,SAMzBpB,M","file":"static/js/main.65ce90b4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Container, Nav, Button } from 'react-bootstrap';\r\nimport './NavBarComp.css';\r\n\r\nconst NavBarComp = ({ handleThemeChange, theme, iconStyle, setIconStyle }) => {\r\n\tconst changeIconOpacity = e => {\r\n\t\tif (theme === 'dark') {\r\n\t\t\tlet style = e._reactName === 'onMouseEnter' ? { color: `lightgray` } : { color: 'darkgray' };\r\n\t\t\tsetIconStyle(style);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet style = e._reactName === 'onMouseEnter' ? { color: '#000000', opacity: 0.7 } : { color: 'lightgray' };\r\n\t\t\tsetIconStyle(style);\r\n\t\t}\r\n\t};\r\n\r\n\tlet btnBgColor = theme === 'dark' ? '#212529' : '#f8f9fa';\r\n\r\n\treturn (\r\n\t\t<Navbar className=\"navbar\" bg={theme} variant={theme}>\r\n\t\t\t<Container className=\"navbar-container\">\r\n\t\t\t\t<Navbar.Brand>Herolo Weather Task</Navbar.Brand>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tvariant=\"outline-secondary\"\r\n\t\t\t\t\tstyle={{ border: '0px', color: 'darkgray', backgroundColor: btnBgColor }}\r\n\t\t\t\t\tonClick={handleThemeChange}\r\n\t\t\t\t\tonMouseEnter={e => changeIconOpacity(e)}\r\n\t\t\t\t\tonMouseLeave={e => changeIconOpacity(e)}\r\n\t\t\t\t>\r\n\t\t\t\t\t{theme === 'dark' ? <i className=\"fas fa-sun\" style={iconStyle} /> : <i className=\"fas fa-moon\" style={iconStyle} />}\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Nav className=\"me-auto d-flex\">\r\n\t\t\t\t\t<Link to=\"/\">Home</Link>\r\n\r\n\t\t\t\t\t<Link to=\"/favorites\" style={{ marginLeft: '12px' }}>\r\n\t\t\t\t\t\tFavorites\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</Nav>\r\n\t\t\t</Container>\r\n\t\t</Navbar>\r\n\t);\r\n};\r\n\r\nexport default NavBarComp;\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nconst myKey = 'wHSphIhWYKNVVwo0HdsQF8c4BjHGenxI';\r\n\r\nexport const getLocationAutocomplete = createAsyncThunk('location/getLocationAutocomplete', async (cityName, { dispatch, getState }) => {\r\n\tconst api = {\r\n\t\tbase: 'https://dataservice.accuweather.com/locations/v1/cities/autocomplete',\r\n\t\tquery: `?apikey=${myKey}&q=${cityName}`\r\n\t};\r\n\treturn fetch(api.base + api.query).then(res => res.json());\r\n});\r\n\r\nconst locationAutocompleteSlice = createSlice({\r\n\tname: 'locationAutocomplete',\r\n\tinitialState: {\r\n\t\tdata: [],\r\n\t\tstatus: null\r\n\t},\r\n\textraReducers: {\r\n\t\t[getLocationAutocomplete.pending]: (state, action) => {\r\n\t\t\tstate.status = 'loading';\r\n\t\t},\r\n\t\t[getLocationAutocomplete.fulfilled]: (state, { payload }) => {\r\n\t\t\tstate.data = payload;\r\n\t\t\tstate.status = 'success';\r\n\t\t},\r\n\t\t[getLocationAutocomplete.rejected]: (state, action) => {\r\n\t\t\tstate.status = 'failed';\r\n\t\t}\r\n\t}\r\n});\r\n\r\nexport default locationAutocompleteSlice.reducer;\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nconst myKey = 'wHSphIhWYKNVVwo0HdsQF8c4BjHGenxI';\r\n\r\nexport const getCurrentCondition = createAsyncThunk('location/getCurrentCondition', async (locationKey, { dispatch, getState }) => {\r\n\tconst api = {\r\n\t\tbase: `https://dataservice.accuweather.com/currentconditions/v1/${locationKey}`,\r\n\t\tquery: `?apikey=${myKey}`\r\n\t};\r\n\treturn fetch(api.base + api.query).then(res => res.json());\r\n});\r\n\r\nconst currentConditionSlice = createSlice({\r\n\tname: 'currentCondition',\r\n\tinitialState: {\r\n\t\tdata: {},\r\n\t\tfavoritesConditions: [],\r\n\t\tstatus: null\r\n\t},\r\n\textraReducers: {\r\n\t\t[getCurrentCondition.pending]: (state, action) => {\r\n\t\t\tstate.status = 'Get location conditions loading';\r\n\t\t},\r\n\t\t[getCurrentCondition.fulfilled]: (state, { payload }) => {\r\n\t\t\tstate.data = payload[0];\r\n\t\t\tstate.status = 'Get location conditions success';\r\n\t\t},\r\n\t\t[getCurrentCondition.rejected]: (state, action) => {\r\n\t\t\tstate.status = 'Get location conditions failed';\r\n\t\t},\r\n\t\tremoveFromFavoritesConditions: (state, action) => {\r\n\t\t\tlet favoritesConditionsArr = [ ...state.favoritesConditions ];\r\n\t\t\tstate.favoritesConditions = favoritesConditionsArr.filter(fav => fav.id === action.payload.id);\r\n\t\t}\r\n\t}\r\n});\r\n\r\nexport default currentConditionSlice.reducer;\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nconst myKey = 'wHSphIhWYKNVVwo0HdsQF8c4BjHGenxI';\r\n\r\nexport const getForecast = createAsyncThunk('location/getForecast', async (locationKey, { dispatch, getState }) => {\r\n\tconst api = {\r\n\t\tbase: `https://dataservice.accuweather.com/forecasts/v1/daily/5day/${locationKey}`,\r\n\t\tquery: `?apikey=${myKey}`\r\n\t};\r\n\treturn fetch(api.base + api.query).then(res => res.json());\r\n});\r\n\r\nconst forecastSlice = createSlice({\r\n\tname: 'currentCondition',\r\n\tinitialState: {\r\n\t\tdata: [],\r\n\t\tstatus: null\r\n\t},\r\n\textraReducers: {\r\n\t\t[getForecast.pending]: (state, action) => {\r\n\t\t\tstate.status = 'loading';\r\n\t\t},\r\n\t\t[getForecast.fulfilled]: (state, { payload }) => {\r\n\t\t\tstate.data = payload;\r\n\t\t\tstate.status = 'success';\r\n\t\t},\r\n\t\t[getForecast.rejected]: (state, action) => {\r\n\t\t\tstate.status = 'failed';\r\n\t\t}\r\n\t}\r\n});\r\n\r\nexport default forecastSlice.reducer;\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nconst myKey = 'wHSphIhWYKNVVwo0HdsQF8c4BjHGenxI';\r\n\r\nexport const getGeolocation = createAsyncThunk('location/getGeolocation', async (latLonStr, { dispatch, getState }) => {\r\n\tconst api = {\r\n\t\tbase: 'https://dataservice.accuweather.com/locations/v1/cities/geoposition/search',\r\n\t\tquery: `?apikey=${myKey}&q=${latLonStr}`\r\n\t};\r\n\treturn fetch(api.base + api.query).then(res => res.json());\r\n});\r\n\r\nconst geolocationSlice = createSlice({\r\n\tname: 'geolocation',\r\n\tinitialState: {\r\n\t\tdata: {},\r\n\t\tstatus: null\r\n\t},\r\n\textraReducers: {\r\n\t\t[getGeolocation.pending]: (state, action) => {\r\n\t\t\tstate.status = 'loading';\r\n\t\t},\r\n\t\t[getGeolocation.fulfilled]: (state, { payload }) => {\r\n\t\t\tstate.data = payload;\r\n\t\t\tstate.status = 'success';\r\n\t\t},\r\n\t\t[getGeolocation.rejected]: (state, action) => {\r\n\t\t\tstate.status = 'failed';\r\n\t\t}\r\n\t}\r\n});\r\n\r\nexport default geolocationSlice.reducer;\r\n","import React from 'react';\r\nimport './ForecastDay.css';\r\n\r\nconst ForecastDay = ({ daily, getDegreesStr }) => {\r\n\tconst dateBuilder = () => {\r\n\t\tlet d = new Date(daily.Date);\r\n\t\tlet days = [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday' ];\r\n\t\tlet day = days[d.getDay()];\r\n\t\treturn day;\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"weather-forecast-item\" style={{}}>\r\n\t\t\t<div className=\"day\">{dateBuilder()}</div>\r\n\t\t\t<img src={`https://www.accuweather.com/images/weathericons/${daily.Day.Icon}.svg`} className=\"w-icon\" alt=\"\" />\r\n\t\t\t<div className=\"temp\">\r\n\t\t\t\t{getDegreesStr(daily.Temperature.Minimum.Value)} - {getDegreesStr(daily.Temperature.Maximum.Value)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ForecastDay;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const favoritesSlice = createSlice({\r\n\tname: 'favorites',\r\n\tinitialState: {\r\n\t\tdata: [],\r\n\t\tstatus: null\r\n\t},\r\n\treducers: {\r\n\t\taddToFavorites: (state, action) => {\r\n\t\t\tstate.data.push(action.payload);\r\n\t\t},\r\n\t\tremoveFromFavorites: (state, action) => {\r\n\t\t\tlet favoritesArr = [ ...state.data ];\r\n\t\t\tstate.data = favoritesArr.filter(fav => fav.id !== action.payload.id);\r\n\t\t}\r\n\t}\r\n});\r\n\r\nexport const { addToFavorites, removeFromFavorites } = favoritesSlice.actions;\r\n\r\nexport default favoritesSlice.reducer;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addToFavorites, removeFromFavorites } from '../redux/slices/favoritesSlice';\r\nimport './CurrentWeatherComp.css';\r\n\r\nconst CurrentWeatherComp = ({ celcius, setCelcius, city, getDegreesStr }) => {\r\n\tconst dispatch = useDispatch();\r\n\tlet { data: geolocationData } = useSelector(state => state.geolocation);\r\n\tlet { data: currentConditionData } = useSelector(state => state.currentCondition);\r\n\tlet { data: favorites } = useSelector(state => state.favorites);\r\n\r\n\tconst checkIfFavorite = () => {\r\n\t\tif (favorites.length === 0) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet check = favorites.some(fav => localStorage.getItem('locationKey') === fav.id);\r\n\t\t\treturn check;\r\n\t\t}\r\n\t};\r\n\r\n\tconst favoritesHandler = () => {\r\n\t\tif (checkIfFavorite()) {\r\n\t\t\tdispatch(\r\n\t\t\t\tremoveFromFavorites({\r\n\t\t\t\t\tid: localStorage.getItem('locationKey') !== null ? localStorage.getItem('locationKey') : geolocationData.Key\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t\telse\r\n\t\t\tdispatch(\r\n\t\t\t\taddToFavorites({\r\n\t\t\t\t\tid: localStorage.getItem('locationKey') !== null ? localStorage.getItem('locationKey') : geolocationData.Key,\r\n\t\t\t\t\tname: city !== '' ? city : geolocationData.LocalizedName,\r\n\t\t\t\t\tcurrentWeather: { ...currentConditionData }\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"current-location\">\r\n\t\t\t<div className=\"location-weather-container\">\r\n\t\t\t\t<div className=\"location-info\">\r\n\t\t\t\t\t{city === '' ? geolocationData.LocalizedName : city}\r\n\t\t\t\t\t<div className=\"favorites-icon\" onClick={favoritesHandler}>\r\n\t\t\t\t\t\t{checkIfFavorite() ? <i className=\"fas fa-heart\" /> : <i className=\"far fa-heart\" />}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"weather-info\">\r\n\t\t\t\t\t<div className=\"degrees-info\">\r\n\t\t\t\t\t\t{getDegreesStr(currentConditionData.Temperature.Imperial.Value)}\r\n\t\t\t\t\t\t<div className=\"degree-change-btn\" onClick={() => setCelcius(!celcius)}>\r\n\t\t\t\t\t\t\t|{celcius ? currentConditionData.Temperature.Imperial.Unit : currentConditionData.Temperature.Metric.Unit}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"weather-description\">{currentConditionData.WeatherText}</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CurrentWeatherComp;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getLocationAutocomplete } from '../redux/slices/locationAutocompleteSlice';\r\nimport { getCurrentCondition } from '../redux/slices/currentConditionSlice';\r\nimport { getForecast } from '../redux/slices/forecastSlice';\r\nimport { getGeolocation } from '../redux/slices/geolocationSlice';\r\nimport ForecastDay from './ForecastDay';\r\nimport CurrentWeatherComp from './CurrentWeatherComp';\r\nimport { FormControl, InputGroup, Spinner } from 'react-bootstrap';\r\nimport './HomeScreen.css';\r\n\r\nconst HomeScreen = ({ match }) => {\r\n\tconst [ query, setQuery ] = useState('');\r\n\tconst [ displaySuggestionBox, setDisplaySuggestionBox ] = useState(false);\r\n\tconst [ city, setCity ] = useState('');\r\n\tconst [ celcius, setCelcius ] = useState(false);\r\n\tconst dispatch = useDispatch();\r\n\tlet { data: currentConditionData } = useSelector(state => state.currentCondition);\r\n\tlet { data: forecastData } = useSelector(state => state.forecast);\r\n\tlet { data: locationAutocompleteData } = useSelector(state => state.locationAutocomplete);\r\n\tlet { data: geolocationData } = useSelector(state => state.geolocation);\r\n\tlet { data: favorites } = useSelector(state => state.favorites);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (match.params.id !== undefined) {\r\n\t\t\tconsole.log(match.params.id);\r\n\t\t\tdispatch(getGeolocation('32.045, 34.77'));\r\n\t\t\tdispatch(getCurrentCondition(match.params.id));\r\n\t\t\tdispatch(getForecast(match.params.id));\r\n\t\t\tsetCity(favorites.find(fav => fav.id === match.params.id).name);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdispatch(getGeolocation('32.045, 34.77'));\r\n\t\t\tdispatch(getCurrentCondition('215854'));\r\n\t\t\tdispatch(getForecast('215854'));\r\n\t\t\tlocalStorage.setItem('locationKey', '215854');\r\n\t\t\tsetCity('');\r\n\t\t}\r\n\t}, []);\r\n\r\n\tconst search = async cityName => {\r\n\t\tdispatch(getLocationAutocomplete(cityName));\r\n\t};\r\n\r\n\tconst getDegreesStr = fahren => {\r\n\t\tif (celcius) {\r\n\t\t\tlet calcCelcius = (fahren - 32) / 1.8;\r\n\t\t\treturn `${calcCelcius.toFixed(1)}°C`;\r\n\t\t}\r\n\t\telse return `${fahren.toFixed(1)}°F`;\r\n\t};\r\n\r\n\tconst clickSuggestion = location => {\r\n\t\tsetQuery(location.LocalizedName);\r\n\t\tdispatch(getCurrentCondition(location.Key));\r\n\t\tdispatch(getForecast(location.Key));\r\n\t\tsetCity(location.LocalizedName);\r\n\t\tlocalStorage.setItem('locationKey', location.Key);\r\n\t};\r\n\r\n\tconst suggestionBoxHandler = () => {\r\n\t\tif (displaySuggestionBox) {\r\n\t\t\tsetDisplaySuggestionBox(false);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"homescreen\" onClick={suggestionBoxHandler}>\r\n\t\t\t<InputGroup className=\"input-group\" style={{ width: '350px' }}>\r\n\t\t\t\t<FormControl\r\n\t\t\t\t\tclassName=\"input-textfield\"\r\n\t\t\t\t\tplaceholder=\"Enter city here\"\r\n\t\t\t\t\tvalue={query}\r\n\t\t\t\t\tonClick={() => setDisplaySuggestionBox(true)}\r\n\t\t\t\t\tonChange={event => {\r\n\t\t\t\t\t\tsearch(event.target.value);\r\n\t\t\t\t\t\tsetQuery(event.target.value);\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tautoComplete=\"off\"\r\n\t\t\t\t/>\r\n\t\t\t</InputGroup>\r\n\t\t\t{displaySuggestionBox && locationAutocompleteData.length > 0 ? (\r\n\t\t\t\t<div className=\"autocomplete-container\">\r\n\t\t\t\t\t{locationAutocompleteData.map((location, index) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div className=\"option\" key={index} onClick={() => clickSuggestion(location)} tabIndex=\"0\">\r\n\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t{location.LocalizedName}, {location.Country.LocalizedName}\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<div />\r\n\t\t\t)}\r\n\r\n\t\t\t{currentConditionData.WeatherText === undefined || forecastData.DailyForecasts === undefined || geolocationData.Key === undefined ? (\r\n\t\t\t\t<Spinner animation=\"border\" style={{ marginTop: '50px' }} />\r\n\t\t\t) : (\r\n\t\t\t\t<div className=\"weather-container\">\r\n\t\t\t\t\t<CurrentWeatherComp city={city} celcius={celcius} setCelcius={setCelcius} getDegreesStr={getDegreesStr} />\r\n\r\n\t\t\t\t\t<div className=\"forecast-info\">\r\n\t\t\t\t\t\t{forecastData.DailyForecasts.map((daily, index) => <ForecastDay key={index} daily={daily} getDegreesStr={getDegreesStr} />)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\nexport default HomeScreen;\r\n","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './FavoriteCityComp.css';\r\n\r\nconst FavoriteCityComp = ({ fav, history }) => {\r\n\tconst func = () => {\r\n\t\tlocalStorage.setItem('locationKey', fav.id);\r\n\t\thistory.push(`/${fav.id}`);\r\n\t};\r\n\treturn (\r\n\t\t<div className=\"favorite-location\">\r\n\t\t\t<div className=\"location-name\">\r\n\t\t\t\t<Button onClick={func}>{fav.name}</Button>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"location-degree\">\r\n\t\t\t\t{fav.currentWeather.Temperature.Metric.Value}°{fav.currentWeather.Temperature.Metric.Unit}\r\n\t\t\t</div>\r\n\t\t\t<img\r\n\t\t\t\tsrc={`https://www.accuweather.com/images/weathericons/${fav.currentWeather.WeatherIcon}.svg`}\r\n\t\t\t\tclassName=\"w-icon\"\r\n\t\t\t\twidth=\"80px\"\r\n\t\t\t\theight=\"80px\"\r\n\t\t\t\talt=\"\"\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default FavoriteCityComp;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport FavoriteCityComp from './FavoriteCityComp';\r\nimport './FavoritesScreen.css';\r\n\r\nconst FavoritesScreen = () => {\r\n\tlet { data: favoritesData } = useSelector(state => state.favorites);\r\n\r\n\treturn (\r\n\t\t<div className=\"favoritesscreen\">\r\n\t\t\t<h2 className=\"favorites-headline\">My Favorites</h2>\r\n\t\t\t{favoritesData.length === 0 ? (\r\n\t\t\t\t<h5>You Don't Have Any Favorites Yet!</h5>\r\n\t\t\t) : (\r\n\t\t\t\t<div className=\"favorites-grid\">{favoritesData.map((fav, index) => <FavoriteCityComp key={index} fav={fav} />)}</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default FavoritesScreen;\r\n","export default __webpack_public_path__ + \"static/media/light-mode.46247aaa.jpg\";","export default __webpack_public_path__ + \"static/media/night-mode.94f5695e.jpg\";","import { useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport NavBarComp from './NavBarComp';\nimport HomeScreen from './HomeScreen';\nimport FavoritesScreen from './FavoritesScreen';\nimport lightModeImg from '../images/light-mode.jpg';\nimport darkModeImg from '../images/night-mode.jpg';\nimport './App.css';\n\nfunction App(){\n\tconst [ theme, setTheme ] = useState('dark');\n\tconst [ bgImage, setBgImage ] = useState(darkModeImg);\n\tconst [ fontColor, setFontColor ] = useState('#FFF');\n\tconst [ iconStyle, setIconStyle ] = useState({});\n\n\tconst handleThemeChange = () => {\n\t\tif (theme === 'dark') {\n\t\t\tsetTheme('light');\n\t\t\tsetBgImage(lightModeImg);\n\t\t\tsetFontColor('#000');\n\t\t\tsetIconStyle({ color: '#000000', opacity: 0.7 });\n\t\t}\n\t\telse {\n\t\t\tsetTheme('dark');\n\t\t\tsetBgImage(darkModeImg);\n\t\t\tsetFontColor('#FFF');\n\t\t\tsetIconStyle({ color: 'lightgray' });\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"App\" style={{ color: fontColor, backgroundImage: `url(${bgImage})` }}>\n\t\t\t<NavBarComp handleThemeChange={handleThemeChange} theme={theme} iconStyle={iconStyle} setIconStyle={setIconStyle} />\n\t\t\t<Switch>\n\t\t\t\t<Route path=\"/favorites\" component={FavoritesScreen} />\n\t\t\t\t<Route path=\"/:id\" component={HomeScreen} />\n\t\t\t\t<Route path=\"/\" component={HomeScreen} />\n\t\t\t</Switch>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport currentConditionReducer from './slices/currentConditionSlice';\r\nimport locationAutocompleteReducer from './slices/locationAutocompleteSlice';\r\nimport forecastReducer from './slices/forecastSlice';\r\nimport geolocationReducer from './slices/geolocationSlice';\r\nimport favoritesReducer from './slices/favoritesSlice';\r\n\r\nexport default configureStore({\r\n\treducer: {\r\n\t\tcurrentCondition: currentConditionReducer,\r\n\t\tlocationAutocomplete: locationAutocompleteReducer,\r\n\t\tforecast: forecastReducer,\r\n\t\tgeolocation: geolocationReducer,\r\n\t\tfavorites: favoritesReducer\r\n\t}\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<BrowserRouter>\n\t\t\t\t<App />\n\t\t\t</BrowserRouter>\n\t\t</Provider>,\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}